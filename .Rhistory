y = hwy,
),
colour = "Blue",
shape = 23) #assign the aesthetic property manually, the colour doesnt convey any var
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
),
colour = "Blue",
shape = 14) #assign the aesthetic property manually, the colour doesnt convey any var
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = "Blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = Blue))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = blue))
?color
?stroke
?geom_point
?geom_point
ggplot(mpg, aes(displ, hwy)) +
geom_point(shape = 21, colour = "red", fill = "blue", size = 5, stroke = 5)
ggplot(mpg, aes(displ, hwy)) +
geom_point(shape = 21, colour = "red", fill = "blue", size = 5, stroke = 2)
?ggplot
ggplot(mpg, aes(displ, hwy, colour = displ < 5)) +
geom_point()
ggplot(mpg, aes(displ, hwy, colour = hwy < 25)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~class, nrow = 2)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(manufacturer ~ year)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(drv ~ cyl
)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(cyl ~ drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(. ~ drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(drv ~ .) #if only want 1 more var instead of 2
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(. ~ drv) #if only want 1 more var instead of 2
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv ~ cyl)
#geometric objects
ggplot(mpg, aes(displ, hwy)) +
geom_smooth(colour = displ < 5)
#geometric objects
ggplot(mpg, aes(displ, hwy, colour = displ < 5)) +
geom_smooth()
#geometric objects
ggplot(mpg, aes(displ, hwy, colour = displ <= 5)) +
geom_smooth()
#geometric objects
ggplot(mpg, aes(displ, hwy)) +
geom_smooth()
dev.off
dev.off()
dev.off
dev.off
pdf("geom_smooth.pdf")
ggplot(mpg, aes(displ, hwy)) +
geom_smooth()
dev.off
setwd("E:/R lessons")
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "fill")
library(tidyverse)
ggplot2::diamonds
ggplot(diamonds, aes(cut, fill = clarity)) +
geom_bar(position = "fill")
#coordinate sys
ggplot2::mpg
library(tidyverse)
view(mpg)
#coordinate sys
ggplot(mpg, aes(class, hwy)) +
geom_boxplot()
#coordinate sys
ggplot(mpg, aes(class, hwy)) +
geom_boxplot()+
coord_flip()
#coord_polar
ggplot2::diamonds
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(aes(cut, fill = cut,
show.legend = FALSE,
width = 2)
)
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(aes(cut, fill = cut,
show.legend = FALSE,
width = 2)+
labs(x=NULL, y=NULL)
)
bar <- ggplot(diamonds) +
geom_bar(aes(cut, fill = cut,
show.legend = FALSE,
width = 2)+
labs(x=NULL, y=NULL)
)
?geom_bar
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 2) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar + coord_flip()
bar + coord_polar()
bar + coord_flip()
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)
bar + coord_polar()
bar + coord_flip()
?theme
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 1)
bar + coord_flip()
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 2)
bar + coord_flip()
bar + coord_polar()
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 3)
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 3)
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 2) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 3)
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 2) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 1)
bar + coord_flip()
bar <- ggplot(diamonds) +
geom_bar(
aes(cut, fill = cut),
show.legend = FALSE,
width = 1) +
labs(x = NULL, y = NULL)+
theme(aspect.ratio = 1)
bar + coord_flip()
bar + coord_polar()
bar + coord_flip()
par(mfrow=c(1,2))
plot(bar + coord_flip())
plot(bar + coord_polar())
bar1 <- bar + coord_flip()
bar2 <- bar + coord_polar()
par(mfrow=c(1,2))
plot(bar1)
plot(bar2))
par(mfrow=c(1,2))
plot(bar1)
plot(bar2)
plot(bar2)
plot(bar1)
par(mfrow=c(1,2))
plot(bar1)
plot(bar2)
libary(gridextra)
install.packages(gridextra)
install.packages(gridExtra)
install.packages("gridExtra")
libary(gridExtra)
library(gridExtra)
grid.arrange(bar1, bar2, ncol=2)
bar+coord_map()
bar+coord_map()
?coord_fixed
grid.arrange(bar1, bar2, ncol=2)
?grid.arrange
grid.arrange(bar1, bar2, ncol=2, name = "GridExtra")
grid.arrange(bar1, bar2, ncol=2) +
labs(title = "GridExtra")
bar1 <- bar + coord_flip() + labs(title = "Bar")
bar2 <- bar + coord_polar() + labs(title = "Polar")
install.packages(gridExtra)
library(gridExtra)
grid.arrange(bar1, bar2, ncol=2)
?labs
?geom_abline
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
grid.arrange(unfixed, unfixed, ncol=2)
unfixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
labs(title = "UNFIXED")
fixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed() +
labs(title = "FIXED")
grid.arrange(unfixed, unfixed, ncol=2)
?coord_fixed
unfixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
labs(title = "UNFIXED")
fixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed(ratio = 2) +
labs(title = "FIXED")
grid.arrange(unfixed, unfixed, ncol=2)
grid.arrange(unfixed, fixed, ncol=2)
grid.arrange(unfixed, fixed, ncol=2)
fixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed(ratio = 1) +
labs(title = "FIXED")
grid.arrange(unfixed, fixed, ncol=2)
ggsave("unfixed vs fixed")
ggsave("unfixed vs fixed.pdf")
?ggsave
ggsave("unfixed vs fixed.pdf",
plot = grid.arrange(unfixed, fixed, ncol=2))
fixed <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed(ratio = 1) +
labs(title = "FIXED,ratio=1")
ggsave("unfixed vs fixed.pdf",
plot = grid.arrange(unfixed, fixed, ncol=2))
ggplot2::diamonds
stat_count(diamonds$cut)
?stat_count
ggplot(diamonds, aes(cut, fill = cut)) +
stat_count(prop = 1)
ggplot(diamonds, aes(cut, stat(prop), fill = cut)) +
stat_count()
?stat_count
ggplot(diamonds, aes(cut, fill = cut)) +
stat_count()
ggplot(diamonds, aes(cut, fill = cut)) +
stat_count(show.legend = F)
ggplot(diamonds, aes(cut, fill = cut)) +
stat_count(show.legend = F)+
labs(x=NULL, y=NULL)
ggplot(diamonds, aes(cut, fill = cut)) +
stat_count(show.legend = F)+
labs(x=NULL, y=NULL)+
coord_flip()
setwd("E:/R lessons")
?geom_abline
1+41
getwd()
1/200
0.005*30
tan(pi/2)
this_is_a_really_long_name <- 2.5
#function_name(arg1 = val1, arg2 = val2, ...)
seq(1,10)
x <- "hello world
ggplot2::diamonds
filter(diamonds, carat > 3)
(filter(diamonds, carat > 3))
ggplot2::diamonds
ggplot2::diamonds
filter(diamonds, carat > 3)
ggplot2::diamonds
library(tidyverse)
view(diamonds)
x <- "hello world"
x <- "hello world"
ggplot2::diamonds
filter(diamonds, carat > 3)
(filter(diamonds, carat > 3))
ggplot2::mpg
filter(mpg, cyl == 8)
filter(mpg, cyl = 8)
(filter(diamonds, carat == 3))
getwd()
getwd()
source('E:/R lessons/Lesson5 data transformation/Lesson5  data transformation.R', echo=TRUE)
install.packages("nycflights13")
source('E:/R lessons/Lesson5 data transformation/Lesson5  data transformation.R', echo=TRUE)
library(tidyverse)
view(nycflights13)
nycflights13::flights
view(flights)
head(flights)
summary(flights$flight)
install.packages("nycflights13")
install.packages("nycflights13")
#dplyr
#filter
filter(flights, month == 1, day <2)
#dplyr
#filter
filter(flights, month == 1, day < 2)
nycflights13::flights
#dplyr
#filter
filter(flights, month == 1, day < 2)
#dplyr
#filter
filter(flights, month == 1, day == 2)
#dplyr
#filter
filter(flights, month == 1)
nycflights13::flights
#dplyr
#filter
filter(flights, month == 1)
library(nycflights13)
library(nycflights13)
library(tidyverse)
nycflights13::flights
#dplyr
#filter
filter(flights, month == 1)
#dplyr
#filter
filter(flights, month == 1, day < 3)
#dplyr
#filter
filter(flights, month == 1, day == 2)
#comparison
#<, <=, >,>=, != (not equal to), == (equal to)
1/2 ==1
1/2 *2 ==1
sqrt(2)^2 ==2
near(sqrt(2)^2 == 2)
near(sqrt(2)^2, 2)
#logical operator
#&= and, |= or, !=not, xor()= exclude the overlap
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11,12))
View(nov_dec)
filter(flights, !(arr_delay>120 & dep_delay>120))
filter(flights, !arr_delay>120 & !dep_delay>120)
is.na(yiwen)
#exercise
filter(flights, !arr_delay<120)
filter(flights, IAH | HOU)
filter(flights, dest=HOU | dest=IAH)
filter(flights, dest = HOU | dest = IAH)
filter(flights, dest == HOU | dest == IAH)
view(flights)
filter(flights, dest == IAH)
filter(flights, dest %in% c(IAH, HOU))
filter(flights, dest %in% c("IAH", "HOU"))
(filter(flights, dest %in% c("IAH", "HOU")))
filter(flights, month %in% c(7,8,9))
filter(flights, arr_delay>120 & dep_delay <= 0)
filter(flights, sched_dep_time %in% c(0000:0600))
filter(flights, dep_time %in% c(2400:0600))
filter(flights, dep_time %in% c(0000:0600))
?between
filter(flights, between(month, 7,9))
is.na(NA^0)
is.na(yiwen) #determine if the obj is defined
is.na(NA&F)
#arrange rows
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
df <- tibble(x=c(2,5,NA))
arrange(df, x)
arrange(df, aesc(x))
arrange(df, asce(x))
?desc
arrange(df, desc(x))
#exercise
arrange(df, is.na(x))
#exercise
arrange(df, desc(is.na(x)))
arrange(flights, dep_delay)
arrange(flights, distance/hour*60+minute)
arrange(flights, desc(distance/hour*60+minute))
view(arrange(flights, desc(distance/hour*60+minute)))
view(arrange(flights, desc(air_time)))
#select
select(flights, year, month, day, carrier)
select(flights, year:day)
flights %>%
arrange(-air_time) %>%
select(carrier, flight, air_time)
select(flights, -(year:day))
rename(flights, tailnum = tail_num)
rename(flights, tail_num = tailnum)
select(flights, dep_delay, arr_delay, everything())
?one_of
select(flights, contains("delay"))
select(flights, contains("delay"), -sched_arr_time)
select(flights, contains("delay"), -starts_with(sched))
select(flights, contains("delay"), -starts_with("sched"))
select(flights, contains("delay"), ends_with("time"), -starts_with("sched"))
select(flights, contains("delay"), ends_with("time"), -starts_with("sched","air"))
select(flights, contains("delay"), ends_with("time"), -starts_with("sched"), -starts_with("air"))
select(flights, one_of(vars))
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
select(flights, contains("TIME"))
select(flights, contains("Time",ignore.case = F )) contain
select(flights, contains("Time",ignore.case = F ))
#mutate= add new var
flights_sml <- select(
year:day,
ends_with("delay"),
distance,
air_time
)
#mutate= add new var
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed= distance/ (air_time*60)
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed= distance/ (air_time*60),
everything()
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed= distance/ (air_time*60),
gain_per_hour= gain/speed
)
#if only want the new vars created
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time/60,
gain_per_hour= gain/hours)
#useful creation function
transmute(flights,
air_time,
hour = air_time %/% 100,
minute = air_time %% 100)
x <- 1:10
lag(x)
lag(x,2)
lead(x)
cumsum(x)
cumprod(x)
cummin(x)
cummax(x)
?cummax
cummean(x
)
y <- c(1,2,2,NA,3,10,5,0)
min_rank(y)
row_number(y)
y <- c(1,2,2,NA,3,5,10)
min_rank(y)
y <- c(1,2,2,NA,3,4,5)
min_rank(y)
y <- c(1,2,2,NA,3,4,5)
min_rank(y)
